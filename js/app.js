class RentTaxApp {
    constructor() {
        this.db = db;
        this.calculator = taxCalculator;
        this.charts = new ChartsManager();
        this.currentUser = null;

        // –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        this.initializeAppWithDB();
    }

    async initializeAppWithDB() {
        try {
            // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            await this.db.waitForInit();

            this.initializeEventListeners();
            this.loadTheme();
            await this.loadInitialData();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', 'error');
        }
    }

    initializeEventListeners() {
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
        document.querySelectorAll('.nav-btn').forEach(btn => {
            if (btn.id !== 'themeToggle') {
                btn.addEventListener('click', (e) => this.switchPage(e.target.dataset.page));
            }
        });

        // –¢–µ–º–∞
        document.getElementById('themeToggle').addEventListener('click', () => this.toggleTheme());

        // –û–±—ä–µ–∫—Ç—ã
        document.getElementById('addObjectBtn').addEventListener('click', () => this.showObjectModal());
        document.getElementById('objectForm').addEventListener('submit', (e) => this.saveObject(e));
        document.getElementById('cancelObjectBtn').addEventListener('click', () => this.hideObjectModal());

        // –î–æ–≥–æ–≤–æ—Ä—ã
        document.getElementById('addContractBtn').addEventListener('click', () => this.showContractModal());
        document.getElementById('contractForm').addEventListener('submit', (e) => this.saveContract(e));
        document.getElementById('cancelContractBtn').addEventListener('click', () => this.hideContractModal());

        // –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
        document.getElementById('calculateBtn').addEventListener('click', () => this.calculateTax());

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏–π
        [
            'rentIncome', 'additionalIncome', 'mortgageExpense',
            'utilitiesExpense', 'maintenanceExpense', 'otherExpenses'
        ].forEach(id => {
            document.getElementById(id).addEventListener('input', () => this.calculateTax());
        });

        // –†–∞—Å—á–µ—Ç –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–∏–ø–∞ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞
        document.querySelectorAll('input[name="tenantType"]').forEach(radio => {
            radio.addEventListener('change', () => this.calculateTax());
        });

        // –≠–∫—Å–ø–æ—Ä—Ç
        document.getElementById('exportBtn').addEventListener('click', () => this.exportData());

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –∏—Ö
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('modal')) {
                e.target.classList.add('hidden');
            }
        });

        this.setInputSteps();
    }

    setInputSteps() {
        // –ü–æ–ª—è —Å —à–∞–≥–æ–º 1000
        const step1000 = ['rentIncome', 'mortgageExpense'];
        // –ü–æ–ª—è —Å —à–∞–≥–æ–º 500
        const step500 = ['additionalIncome', 'utilitiesExpense', 'maintenanceExpense', 'otherExpenses'];

        step1000.forEach(id => {
            const element = document.getElementById(id);
            if (element) {
                element.step = '1000';
                element.min = '0';
                this.addInputValidation(element);
            }
        });

        step500.forEach(id => {
            const element = document.getElementById(id);
            if (element) {
                element.step = '500';
                element.min = '0';
                this.addInputValidation(element);
            }
        });
    }

    addInputValidation(inputElement) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º placeholder –≤–º–µ—Å—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è
        inputElement.placeholder = '0';
        inputElement.value = ''; // –û—á–∏—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ placeholder

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ–∫—É—Å–∞ - –≤—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç
        inputElement.addEventListener('focus', (e) => {
            // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º –¥–ª—è –≤–≤–æ–¥–∞
            e.target.select();
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞ - –µ—Å–ª–∏ –ø—É—Å—Ç–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º placeholder
        inputElement.addEventListener('blur', (e) => {
            // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º - placeholder —Å–∞–º –ø–æ–∫–∞–∂–µ—Ç—Å—è
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç
            setTimeout(() => {
                e.target.dispatchEvent(new Event('input'));
            }, 10);
        });

        // –ó–∞–ø—Ä–µ—â–∞–µ–º –≤–≤–æ–¥ –Ω–µ—á–∏—Å–ª–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        inputElement.addEventListener('keydown', (e) => {
            // –†–∞–∑—Ä–µ—à–∞–µ–º: —Ü–∏—Ñ—Ä—ã, Backspace, Delete, Tab, —Å—Ç—Ä–µ–ª–∫–∏, Home, End, Enter
            const allowedKeys = [
                'Backspace', 'Delete', 'Tab', 'ArrowLeft', 'ArrowRight',
                'ArrowUp', 'ArrowDown', 'Home', 'End', 'Enter'
            ];

            // –†–∞–∑—Ä–µ—à–∞–µ–º Ctrl+A, Ctrl+C, Ctrl+V, Ctrl+X
            if (e.ctrlKey && ['a', 'c', 'v', 'x'].includes(e.key)) {
                return;
            }

            // –ó–∞–ø—Ä–µ—â–∞–µ–º –≤—Å–µ, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∫–ª–∞–≤–∏—à
            if (!allowedKeys.includes(e.key) && !/^\d$/.test(e.key)) {
                e.preventDefault();
            }
        });

        // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å—Ç–∞–≤–∫–∏
        inputElement.addEventListener('paste', (e) => {
            e.preventDefault();
            const pastedText = e.clipboardData.getData('text');

            // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
            const numbersOnly = pastedText.replace(/[^\d]/g, '');

            if (numbersOnly) {
                // –í—Å—Ç–∞–≤–ª—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                const start = inputElement.selectionStart;
                const end = inputElement.selectionEnd;
                const currentValue = inputElement.value;

                // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                const newValue = currentValue.substring(0, start) + numbersOnly + currentValue.substring(end);
                inputElement.value = newValue;

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                const newCursorPos = start + numbersOnly.length;
                inputElement.setSelectionRange(newCursorPos, newCursorPos);

                // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–±—ã—Ç–∏–µ input –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞
                inputElement.dispatchEvent(new Event('input'));
            }
        });

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è
        inputElement.addEventListener('input', (e) => {
            // –£–¥–∞–ª—è–µ–º –ª—é–±—ã–µ –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –ø–æ—è–≤–∏—Ç—å—Å—è
            const value = e.target.value;
            const cleanValue = value.replace(/[^\d]/g, '');

            if (value !== cleanValue) {
                const cursorPos = e.target.selectionStart;
                e.target.value = cleanValue;
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
                e.target.setSelectionRange(cursorPos - (value.length - cleanValue.length), cursorPos - (value.length - cleanValue.length));
            }

            // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—á–µ—Ç
            this.calculator.calculate();
        });

        // –ó–∞—â–∏—Ç–∞ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        inputElement.addEventListener('contextmenu', (e) => {
            e.preventDefault();
        });
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
    toggleTheme() {
        const body = document.body;
        const themeToggle = document.getElementById('themeToggle');

        if (body.classList.contains('dark-theme')) {
            body.classList.remove('dark-theme');
            themeToggle.textContent = 'üåô –¢—ë–º–Ω–∞—è';
            localStorage.setItem('theme', 'light');
        } else {
            body.classList.add('dark-theme');
            themeToggle.textContent = '‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è';
            localStorage.setItem('theme', 'dark');
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–º—ã –∏–∑ localStorage
    loadTheme() {
        const savedTheme = localStorage.getItem('theme') || 'light';
        const themeToggle = document.getElementById('themeToggle');

        if (savedTheme === 'dark') {
            document.body.classList.add('dark-theme');
            themeToggle.textContent = '‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è';
        } else {
            document.body.classList.remove('dark-theme');
            themeToggle.textContent = 'üåô –¢—ë–º–Ω–∞—è';
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–ª–æ–≥–æ–≤ –∏ –ø—Ä–∏–±—ã–ª–∏ –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ
    calculateTax() {
        this.calculator.calculate();
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å—á–µ—Ç–∞
    displayCalculatorResults(totalIncome, totalExpenses, taxAmount, netProfit, taxInfo) {
        document.getElementById('totalIncome').textContent = this.formatCurrency(totalIncome);
        document.getElementById('totalExpenses').textContent = this.formatCurrency(totalExpenses);
        document.getElementById('taxAmount').textContent = this.formatCurrency(taxAmount);
        document.getElementById('netProfit').textContent = this.formatCurrency(netProfit);

        // –û–±–Ω–æ–≤–ª—è–µ–º label –Ω–∞–ª–æ–≥–∞
        const taxLabel = document.getElementById('taxLabel');
        taxLabel.textContent = `–°—Ç–∞–≤–∫–∞: ${taxInfo.rate * 100}%`;
    }

    switchPage(pageId) {
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.querySelectorAll('.page').forEach(page => {
            page.classList.remove('active');
        });

        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        document.querySelectorAll('.nav-btn').forEach(btn => {
            btn.classList.remove('active');
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        document.getElementById(pageId).classList.add('active');

        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        document.querySelector(`[data-page="${pageId}"]`).classList.add('active');

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        this.loadPageData(pageId);
    }

    async loadPageData(pageId) {
        try {
            switch (pageId) {
                case 'dashboard':
                    await this.loadDashboard();
                    break;
                case 'objects':
                    await this.loadObjects();
                    break;
                case 'contracts':
                    await this.loadContracts();
                    break;
                case 'analytics':
                    await this.loadAnalytics();
                    break;
            }
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${pageId}:`, error);
            this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö', 'error');
        }
    }

    async loadInitialData() {
        await this.loadDashboard();
    }

    async loadDashboard() {
        const objects = await this.db.getObjects();
        const contracts = await this.db.getContracts();
        const payments = await this.db.getRecentPayments(5);

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∏–ø –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞ –∏–∑ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        const currentTenantType = this.calculator.tenantType;
        const overallCalculation = await this.calculator.calculateOverall(currentTenantType);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        document.getElementById('totalProfit').textContent = this.formatCurrency(overallCalculation.netProfit);
        document.getElementById('activeObjects').textContent = objects.length;
        document.getElementById('totalObjects').textContent = objects.length;
        document.getElementById('nextTax').textContent = this.formatCurrency(overallCalculation.taxAmount);

        const activeContracts = contracts.filter(c => c.isActive);
        document.getElementById('upcomingPayments').textContent = activeContracts.length;

        // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        this.displayRecentTransactions(payments);

        // –ë–ª–∏–∂–∞–π—à–∏–µ –ø–ª–∞—Ç–µ–∂–∏
        this.displayUpcomingPayments(activeContracts);
    }

    async loadObjects() {
        const objects = await this.db.getObjects();
        const container = document.getElementById('objectsList');

        container.innerHTML = '';

        if (objects.length === 0) {
            container.innerHTML = `
                <div class="card text-center">
                    <h3>–û–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏</h3>
                    <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏</p>
                    <button class="btn-primary" onclick="app.showObjectModal()">
                        –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π –æ–±—ä–µ–∫—Ç
                    </button>
                </div>
            `;
            return;
        }

        for (const object of objects) {
            const calculation = await this.calculator.calculateForObject(object.id);
            const objectCard = this.createObjectCard(object, calculation);
            container.appendChild(objectCard);
        }
    }

    createObjectCard(object, calculation) {
        const card = document.createElement('div');
        card.className = 'object-card';
        card.innerHTML = `
            <h4>${object.name}</h4>
            <div class="object-details">
                <div>${object.address}</div>
                <div>${this.getObjectTypeText(object.type)}</div>
                <div>–ë–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞: ${this.formatCurrency(object.baseRentRate)}/–º–µ—Å</div>
            </div>
            <div class="object-stats">
                <div>–î–æ—Ö–æ–¥: <strong>${this.formatCurrency(calculation.totalIncome)}</strong></div>
                <div>–ü—Ä–∏–±—ã–ª—å: <strong class="${calculation.netProfit >= 0 ? 'income' : 'expense'}">${this.formatCurrency(calculation.netProfit)}</strong></div>
            </div>
            <div class="object-actions">
                <button class="btn-secondary edit-object" data-id="${object.id}">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                <button class="btn-text delete-object" data-id="${object.id}">–£–¥–∞–ª–∏—Ç—å</button>
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        card.querySelector('.edit-object').addEventListener('click', (e) => {
            e.stopPropagation();
            this.editObject(object.id);
        });

        card.querySelector('.delete-object').addEventListener('click', (e) => {
            e.stopPropagation();
            this.deleteObject(object.id);
        });

        return card;
    }

    async loadContracts() {
        const contracts = await this.db.getContracts();
        const objects = await this.db.getObjects();
        const container = document.getElementById('contractsList');

        container.innerHTML = '';

        if (contracts.length === 0) {
            container.innerHTML = `
                <div class="card text-center">
                    <h3>–î–æ–≥–æ–≤–æ—Ä—ã –∞—Ä–µ–Ω–¥—ã</h3>
                    <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –∞—Ä–µ–Ω–¥—ã</p>
                    <button class="btn-primary" onclick="app.showContractModal()">
                        –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π –¥–æ–≥–æ–≤–æ—Ä
                    </button>
                </div>
            `;
            return;
        }

        for (const contract of contracts) {
            const object = objects.find(o => o.id === contract.objectId);
            const contractCard = this.createContractCard(contract, object);
            container.appendChild(contractCard);
        }
    }

    createContractCard(contract, object) {
        const card = document.createElement('div');
        card.className = 'contract-card';
        card.innerHTML = `
            <h4>–î–æ–≥–æ–≤–æ—Ä —Å ${contract.tenantName}</h4>
            <div class="contract-details">
                <div>–û–±—ä–µ–∫—Ç: ${object ? object.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</div>
                <div>–ü–µ—Ä–∏–æ–¥: ${this.formatDate(contract.startDate)} - ${this.formatDate(contract.endDate)}</div>
                <div>–°—É–º–º–∞: ${this.formatCurrency(contract.rentAmount)}/–º–µ—Å</div>
                <div>–°—Ç–∞—Ç—É—Å: <span class="${contract.isActive ? 'active' : 'inactive'}">${contract.isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ó–∞–≤–µ—Ä—à–µ–Ω'}</span></div>
            </div>
            <div class="contract-actions">
                <button class="btn-secondary edit-contract" data-id="${contract.id}">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                <button class="btn-text delete-contract" data-id="${contract.id}">–£–¥–∞–ª–∏—Ç—å</button>
            </div>
        `;

        card.querySelector('.edit-contract').addEventListener('click', (e) => {
            e.stopPropagation();
            this.editContract(contract.id);
        });

        card.querySelector('.delete-contract').addEventListener('click', (e) => {
            e.stopPropagation();
            this.deleteContract(contract.id);
        });

        return card;
    }

    async loadAnalytics() {
        await this.charts.updateCharts();

        const overallCalculation = await this.calculator.calculateOverall();

        document.getElementById('analyticsIncome').textContent = this.formatCurrency(overallCalculation.totalIncome);
        document.getElementById('analyticsExpenses').textContent = this.formatCurrency(overallCalculation.totalExpenses);
        document.getElementById('analyticsTaxes').textContent = this.formatCurrency(overallCalculation.taxAmount);
        document.getElementById('analyticsProfit').textContent = this.formatCurrency(overallCalculation.netProfit);
    }

    // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤
    showObjectModal(objectId = null) {
        const modal = document.getElementById('objectModal');
        const title = document.getElementById('objectModalTitle');

        if (objectId) {
            title.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç';
            this.loadObjectData(objectId);
        } else {
            title.textContent = '–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç';
            document.getElementById('objectForm').reset();
            document.getElementById('objectId').value = '';
        }

        modal.classList.remove('hidden');
    }

    hideObjectModal() {
        document.getElementById('objectModal').classList.add('hidden');
    }

    async loadObjectData(objectId) {
        const object = await this.db.get('objects', objectId);
        if (object) {
            document.getElementById('objectId').value = object.id;
            document.getElementById('objectName').value = object.name;
            document.getElementById('objectAddress').value = object.address;
            document.getElementById('objectType').value = object.type;
            document.getElementById('objectRent').value = object.baseRentRate;
        }
    }

    async saveObject(event) {
        event.preventDefault();

        const objectId = document.getElementById('objectId').value;
        const objectData = {
            name: document.getElementById('objectName').value,
            address: document.getElementById('objectAddress').value,
            type: document.getElementById('objectType').value,
            baseRentRate: parseFloat(document.getElementById('objectRent').value)
        };

        try {
            if (objectId) {
                await this.db.updateObject(parseInt(objectId), objectData);
                this.showNotification('–û–±—ä–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
            } else {
                await this.db.addObject(objectData);
                this.showNotification('–û–±—ä–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω');
            }

            this.hideObjectModal();
            await this.loadObjects();
            await this.loadDashboard();
        } catch (error) {
            this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞');
            console.error(error);
        }
    }

    async editObject(objectId) {
        this.showObjectModal(objectId);
    }

    async deleteObject(objectId) {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –æ–±—ä–µ–∫—Ç? –í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–æ–≥–æ–≤–æ—Ä—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.')) {
            try {
                await this.db.deleteObject(objectId);
                this.showNotification('–û–±—ä–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
                await this.loadObjects();
                await this.loadDashboard();
            } catch (error) {
                this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞');
                console.error(error);
            }
        }
    }

    // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –¥–ª—è –¥–æ–≥–æ–≤–æ—Ä–æ–≤
    async showContractModal(contractId = null) {
        const modal = document.getElementById('contractModal');
        const title = document.getElementById('contractModalTitle');
        const objectSelect = document.getElementById('contractObject');
        const warningMessage = document.getElementById('noObjectsWarning');
        const saveButton = document.getElementById('saveContractBtn');

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞
        const objects = await this.db.getObjects();
        objectSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç</option>';

        if (objects.length === 0) {
            // –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ—Ç, –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            objectSelect.innerHTML = '<option value="" disabled selected>–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –æ–±—ä–µ–∫—Ç</option>';
            warningMessage.classList.remove('hidden');
            saveButton.disabled = true;
        } else {
            // –ó–∞–ø–æ–ª–Ω–∏—Ç—å select –æ–±—ä–µ–∫—Ç–∞–º–∏
            objects.forEach(object => {
                objectSelect.innerHTML += `<option value="${object.id}">${object.name}</option>`;
            });
            warningMessage.classList.add('hidden');
            saveButton.disabled = false;
        }

        if (contractId) {
            title.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä';
            await this.loadContractData(contractId);
        } else {
            title.textContent = '–ù–æ–≤—ã–π –¥–æ–≥–æ–≤–æ—Ä';
            document.getElementById('contractForm').reset();
            document.getElementById('contractId').value = '';

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –æ–∫–æ–Ω—á–∞–Ω–∏—è - —á–µ—Ä–µ–∑ –≥–æ–¥
            const today = new Date().toISOString().split('T')[0];
            const nextYear = new Date();
            nextYear.setFullYear(nextYear.getFullYear() + 1);
            const nextYearFormatted = nextYear.toISOString().split('T')[0];

            document.getElementById('contractStart').value = today;
            document.getElementById('contractEnd').value = nextYearFormatted;
        }

        modal.classList.remove('hidden');
    }

    hideContractModal() {
        document.getElementById('contractModal').classList.add('hidden');
        // –°–∫—Ä—ã—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        document.getElementById('noObjectsWarning').classList.add('hidden');
    }

    async loadContractData(contractId) {
        const contract = await this.db.get('contracts', contractId);
        if (contract) {
            document.getElementById('contractId').value = contract.id;
            document.getElementById('contractObject').value = contract.objectId;
            document.getElementById('contractTenant').value = contract.tenantName;
            document.getElementById('contractStart').value = contract.startDate;
            document.getElementById('contractEnd').value = contract.endDate;
            document.getElementById('contractAmount').value = contract.rentAmount;
            document.getElementById('contractSchedule').value = contract.paymentSchedule;
        }
    }

    async saveContract(event) {
        event.preventDefault();

        const objects = await this.db.getObjects();
        if (objects.length === 0) {
            this.showNotification('–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏', 'error');
            return;
        }

        const contractId = document.getElementById('contractId').value;
        const contractData = {
            objectId: parseInt(document.getElementById('contractObject').value),
            tenantName: document.getElementById('contractTenant').value,
            startDate: document.getElementById('contractStart').value,
            endDate: document.getElementById('contractEnd').value,
            rentAmount: parseFloat(document.getElementById('contractAmount').value),
            paymentSchedule: document.getElementById('contractSchedule').value
        };

        try {
            if (contractId) {
                await this.db.updateContract(parseInt(contractId), contractData);
                this.showNotification('–î–æ–≥–æ–≤–æ—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
            } else {
                await this.db.addContract(contractData);
                this.showNotification('–î–æ–≥–æ–≤–æ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω');
            }

            this.hideContractModal();
            await this.loadContracts();
            await this.loadDashboard();
        } catch (error) {
            this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–∞');
            console.error(error);
        }
    }

    async editContract(contractId) {
        this.showContractModal(contractId);
    }

    async deleteContract(contractId) {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –¥–æ–≥–æ–≤–æ—Ä? –í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.')) {
            try {
                await this.db.deleteContract(contractId);
                this.showNotification('–î–æ–≥–æ–≤–æ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
                await this.loadContracts();
                await this.loadDashboard();
            } catch (error) {
                this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–∞');
                console.error(error);
            }
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    displayRecentTransactions(payments) {
        const container = document.getElementById('recentTransactions');
        container.innerHTML = '';

        if (payments.length === 0) {
            container.innerHTML = '<div class="transaction-item">–ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π</div>';
            return;
        }

        payments.forEach(payment => {
            const item = document.createElement('div');
            item.className = 'transaction-item';
            item.innerHTML = `
                <div>
                    <div>–ü–ª–∞—Ç–µ–∂ –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É</div>
                    <small>${this.formatDate(payment.date)}</small>
                </div>
                <div class="transaction-amount income">
                    +${this.formatCurrency(payment.amount)}
                </div>
            `;
            container.appendChild(item);
        });
    }

    displayUpcomingPayments(contracts) {
        const container = document.getElementById('upcomingList');
        container.innerHTML = '';

        if (contracts.length === 0) {
            container.innerHTML = '<div class="upcoming-item">–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π</div>';
            return;
        }

        contracts.slice(0, 5).forEach(contract => {
            const item = document.createElement('div');
            item.className = 'upcoming-item';
            item.innerHTML = `
                <div>
                    <div>${contract.tenantName}</div>
                    <small>–°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂</small>
                </div>
                <div class="transaction-amount">
                    ${this.formatCurrency(contract.rentAmount)}
                </div>
            `;
            container.appendChild(item);
        });
    }

    getObjectTypeText(type) {
        const types = {
            'apartment': '–ö–≤–∞—Ä—Ç–∏—Ä–∞',
            'house': '–î–æ–º',
            'room': '–ö–æ–º–Ω–∞—Ç–∞',
            'commercial': '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è'
        };
        return types[type] || type;
    }

    formatCurrency(amount) {
        return new Intl.NumberFormat('ru-RU', {
            style: 'currency',
            currency: 'RUB',
            minimumFractionDigits: 0
        }).format(amount);
    }

    formatDate(dateString) {
        return new Date(dateString).toLocaleDateString('ru-RU');
    }

    showNotification(message, type = 'success') {
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.textContent = message;

        document.body.appendChild(notification);

        setTimeout(() => {
            notification.remove();
        }, 3000);
    }

    async exportData() {
        const objects = await this.db.getObjects();
        const contracts = await this.db.getContracts();
        const payments = await this.db.getPayments();
        const expenses = await this.db.getExpenses();

        const data = {
            objects,
            contracts,
            payments,
            expenses,
            exportDate: new Date().toISOString()
        };

        const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `rent-tax-export-${new Date().toISOString().split('T')[0]}.json`;
        a.click();

        URL.revokeObjectURL(url);
        this.showNotification('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let app;

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–æ–≥–¥–∞ DOM –∑–∞–≥—Ä—É–∂–µ–Ω
document.addEventListener('DOMContentLoaded', async () => {
    try {
        // –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await db.waitForInit();
        // –ü–æ—Ç–æ–º —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = new RentTaxApp();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const notification = document.createElement('div');
        notification.className = 'notification error';
        notification.textContent = '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.';
        document.body.appendChild(notification);
    }
});